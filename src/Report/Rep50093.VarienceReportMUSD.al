
Report 50093 "Malawi Varience Summary"
{
    //RDLCLayout = './Layouts/Payroll Summary P_AU.rdlc';//
    RDLCLayout = './Layouts/VarienceMalawiSummaryusd (2).rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Payroll Employee_AU"; "Payroll Employee_AU")
        {
            DataItemTableView = where("Global Dimension 1" = filter('Malawi'));
            column(ReportForNavId_1000000000; 1000000000) { } // Autogenerated by ForNav - Do not delete
            column(No; "Payroll Employee_AU"."No.")
            {
            }
            column(Basic; "Payroll Employee_AU"."Basic Pay")
            {
            }
            column(Full_Name; "Payroll Employee_AU"."Full Name")
            {
            }
            column(department; "Payroll Employee_AU"."Shortcut Dimension 3")
            {
            }

            column(Perdiem; Perdiem)
            {
            }
            column(CommuterAllowance; CommuterAllowance)
            {
            }
            column(OtherAllowance; OtherAllowance)
            {
            }
            column(OtherAllowanceLastM; OtherAllowanceLastM)
            {
            }
            column(BasicPay; BasicPay)
            {
            }
            column(BasicPayLastMonth; BasicPayLastMonth)
            {
            }
            column(VarianceBasic; VarianceBasic)
            {
            }
            column(GrossPay; GrossPay)
            {
            }
            column(GrossPayLastMonth; GrossPayLastMonth)
            {
            }
            column(Deductions; Deductions)
            {
            }
            column(Benefits; Benefits)
            {
            }
            column(TDeductions; TDeductions)
            {
            }
            column(Netpay; Netpay)
            {
            }
            column(Name; Name)
            {
            }
            column(Pic; CompanyInfo.Picture)
            {
            }
            column(Period; Period)
            {
            }
            column(Statutory; Statutory)
            {
            }
            column(NCount; NCount)
            {
            }
            column(Tnet; Tnet)
            {
            }
            column(Overtime; Overtime)
            {
            }
            column(FringeBenefits; "Fringe Benefits")
            {
            }
            column(HouseAllowance; HouseAllowance)
            {
            }
            column(TravellingAllowance; TravellingAllowance)
            {
            }
            column(AllowableDeduction; AllowableDeduction)
            {
            }
            column(Pension; Pension)
            {
            }
            column(LoanRepayment; LoanRepayment)
            {
            }
            column(Advances; Advances)
            {
            }
            column(PAYE; PAYE)
            {
            }
            column(NSSF; NSSF)
            {
            }
            column(NHIF; NHIF)
            {
            }
            column(jobTitle; jobTitle)
            {
            }
            column(department2; department)
            {
            }
            column(HELB; HELB)
            {
            }
            column(VariencePerDiem; VariencePerDiem)
            {
            }
            column(VariencrGrossPay; VariencrGrossPay)
            {
            }
            column(VariencePaye; VariencePaye)
            {
            }
            column(VarienceHelb; VarienceHelb)
            {
            }
            column(nssfVarience; nssfVarience)
            {
            }
            column(nhifvarience; nhifvarience)
            {
            }
            column(TNSSFIIVarience; TNSSFIIVarience)
            {
            }
            column(varienceNetPay; varienceNetPay)
            {
            }
            column(TNSSF; TNSSF)
            {
            }
            column(TNSSFII; TNSSFII)
            {
            }

            trigger OnPreDataItem();
            begin
                if CompanyInfo.Get() then
                    CompanyInfo.CalcFields(CompanyInfo.Picture);
                UserSetup.Get(UserId);
                if UserSetup."View Payroll" = false then
                    Error('You do not have permissions to view the report');
            end;

            trigger OnAfterGetRecord();
            var
                PrevPeriod: Date;
            begin
                if ("Payroll Employee_AU".Status <> "Payroll Employee_AU".Status::Active) AND ("Payroll Employee_AU"."Branch Code" <> 'KENYA') then CurrReport.Skip;
                Name := "Payroll Employee_AU".Surname + ' ' + "Payroll Employee_AU".Firstname + ' ' + "Payroll Employee_AU".Lastname;
                Perdiem := 0;
                CommuterAllowance := 0;
                OtherAllowance := 0;
                OtherAllowanceLastM := 0;
                GrossPay := 0;
                Statutory := 0;
                Deductions := 0;
                TDeductions := 0;
                Netpay := 0;
                Benefits := 0;
                NSSF := 0;
                NHIF := 0;
                PAYE := 0;
                NCount := 0;
                HELB := 0;
                TNSSF := 0;
                TNSSFII := 0;

                PrevPeriod := CALCDATE('<-1M>', Period);
                //=====================Perdiem varience=====================================================================

                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", HREmployees."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", Period);
                PayrollMonthly.SetRange(PayrollMonthly."Group Text", 'DEDUCTIONS');
                if PayrollMonthly.Find('-') then begin
                    PayrollMonthly.CalcSums("Amount(LCY)");
                    Perdiem := PayrollMonthly."Amount(LCY)";
                end;
                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", HREmployees."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", PrevPeriod);
                PayrollMonthly.SetRange(PayrollMonthly."Group Text", 'DEDUCTIONS');
                if PayrollMonthly.Find('-') then begin
                    PayrollMonthly.CalcSums("Amount(LCY)");
                    PerdiemLastMonth := PayrollMonthly."Amount(LCY)";
                end;
                VariencePerDiem := PerdiemLastMonth - Perdiem;
                //==============================================End Perdiem varience======================================================
                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", "Payroll Employee_AU"."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", Period);
                PayrollMonthly.SetRange(PayrollMonthly."Group Text", 'ALLOWANCE');
                if PayrollMonthly.Find('-') then begin
                    CommuterAllowance := PayrollMonthly."Amount(LCY)";
                end;
                //********************************************Basic Pay ************************************************************************************


                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", "Payroll Employee_AU"."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", Period);
                PayrollMonthly.SetRange(PayrollMonthly."Transaction Code", 'BPAY');
                if PayrollMonthly.Find('-') then begin
                    BasicPay := PayrollMonthly."Amount(LCY)";
                end;

                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", "Payroll Employee_AU"."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", PrevPeriod);
                PayrollMonthly.SetRange(PayrollMonthly."Transaction Code", 'BPAY');
                if PayrollMonthly.Find('-') then begin
                    BasicPayLastMonth := PayrollMonthly."Amount(LCY)";
                end;
                VarianceBasic := BasicPayLastMonth - BasicPay;
                // VariencePerDiem := GrossPayLastMonth - GrossPay;
                //****************************************End Basic Pay ************************************************************************************
                //============================================================GrossPay======================================================================

                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", "Payroll Employee_AU"."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", Period);
                PayrollMonthly.SetRange(PayrollMonthly."Transaction Code", 'GPAY');
                if PayrollMonthly.Find('-') then begin
                    GrossPay := PayrollMonthly."Amount(LCY)";
                end;

                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", "Payroll Employee_AU"."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", PrevPeriod);
                PayrollMonthly.SetRange(PayrollMonthly."Transaction Code", 'GPAY');
                if PayrollMonthly.Find('-') then begin
                    GrossPayLastMonth := PayrollMonthly."Amount(LCY)";
                end;

                VariencrGrossPay := GrossPayLastMonth - GrossPay;
                //=======================================================GrossPay===================================================================
                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", "Payroll Employee_AU"."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", Period);
                PayrollMonthly.SetRange(PayrollMonthly."Transaction Code", 'D001');
                if PayrollMonthly.Find('-') then begin
                    HELB := PayrollMonthly."Amount(LCY)";
                end;
                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", "Payroll Employee_AU"."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", CalcDate('-1M', CalcDate('+CY', Period)));
                PayrollMonthly.SetRange(PayrollMonthly."Transaction Code", 'D001');
                if PayrollMonthly.Find('-') then begin
                    HELBLastMonth := PayrollMonthly."Amount(LCY)";
                end;
                VarienceHelb := HELBLastMonth - HELB;
                //===========================================================varience HELB==========================================
                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", "Payroll Employee_AU"."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", Period);
                PayrollMonthly.SetRange(PayrollMonthly."Transaction Code", 'NSSF');
                if PayrollMonthly.Find('-') then begin
                    TNSSF := 420;
                    TNSSFII := PayrollMonthly."Amount(LCY)" - TNSSF;
                end;

                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", "Payroll Employee_AU"."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", CalcDate('-1M', CalcDate('+CY', Period)));
                PayrollMonthly.SetRange(PayrollMonthly."Transaction Code", 'NSSF');
                if PayrollMonthly.Find('-') then begin
                    TNSSFLastMonth := 420;
                    nssfLastMonth := PayrollMonthly."Amount(LCY)" - TNSSFLastMonth;
                end;
                nssfVarience := nssfLastMonth - TNSSF;
                TNSSFIIVarience := TNSSFLastMonth - TNSSFII;
                // ===================================nssf last month===================================================================================
                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", "Payroll Employee_AU"."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", Period);
                PayrollMonthly.SetRange(PayrollMonthly."Transaction Code", 'NHIF');
                if PayrollMonthly.Find('-') then begin
                    NHIF := Statutory + PayrollMonthly."Amount(LCY)";
                end;
                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", "Payroll Employee_AU"."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", CalcDate('-1M', CalcDate('+CY', Period)));
                PayrollMonthly.SetRange(PayrollMonthly."Transaction Code", 'NHIF');
                if PayrollMonthly.Find('-') then begin
                    NHIFlASTMonth := Statutory + PayrollMonthly."Amount(LCY)";
                end;
                NHIFlASTMonth := NHIFlASTMonth - NHIF;
                //========================================================NHIF===================================================================================================
                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", "Payroll Employee_AU"."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", Period);
                PayrollMonthly.SetRange(PayrollMonthly."Group Text", 'STATUTORIES');
                if PayrollMonthly.Find('-') then begin
                    PayrollMonthly.CalcSums("Amount(LCY)");
                    AllowableDeduction := PayrollMonthly."Amount(LCY)";
                end;


                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", "Payroll Employee_AU"."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", Period);
                PayrollMonthly.SetRange(PayrollMonthly."Transaction Code", 'PAYE');
                if PayrollMonthly.Find('-') then begin
                    PAYE := Statutory + PayrollMonthly."Amount(LCY)";
                end;
                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", "Payroll Employee_AU"."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", CalcDate('-1M', CalcDate('+CY', Period)));
                PayrollMonthly.SetRange(PayrollMonthly."Transaction Code", 'PAYE');
                if PayrollMonthly.Find('-') then begin
                    PayeeLastMonth := Statutory + PayrollMonthly."Amount(LCY)";
                end;
                VariencePaye := PayeeLastMonth - PAYE;
                //============================================================================PAYE================================================================================================
                Statutory := NSSF + NHIF + PAYE;
                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", "Payroll Employee_AU"."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", Period);
                if PayrollMonthly.Find('-') then begin
                    repeat
                        TransCodes.Reset;
                        TransCodes.SetRange(TransCodes."Transaction Code", PayrollMonthly."Transaction Code");
                        TransCodes.SetRange(TransCodes."Transaction Type", TransCodes."transaction type"::Deduction);
                        if TransCodes.Find('-') then
                            Deductions := Deductions + PayrollMonthly."Amount(LCY)";
                    until PayrollMonthly.Next = 0;
                end;
                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", "Payroll Employee_AU"."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", Period);
                if PayrollMonthly.Find('-') then begin
                    repeat
                        TransCodes.Reset;
                        TransCodes.SetRange(TransCodes."Transaction Code", PayrollMonthly."Transaction Code");
                        TransCodes.SetRange(TransCodes."Transaction Type", TransCodes."transaction type"::Income);
                        if TransCodes.Find('-') then
                            if ((PayrollMonthly."Transaction Code" <> '1001') and (PayrollMonthly."Transaction Code" <> '1003')) then
                                OtherAllowance := OtherAllowance + PayrollMonthly."Amount(LCY)";
                    until PayrollMonthly.Next = 0;
                end;
                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", "Payroll Employee_AU"."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", Period);
                if PayrollMonthly.Find('-') then begin
                    repeat
                        TransCodes.Reset;
                        TransCodes.SetRange(TransCodes."Transaction Code", PayrollMonthly."Transaction Code");
                        TransCodes.SetRange(TransCodes."Special Transaction", TransCodes."special transaction"::"Prescribed Benefit");
                        if TransCodes.Find('-') then
                            Benefits := Benefits + PayrollMonthly."Amount(LCY)";
                    until PayrollMonthly.Next = 0;
                end;

                //******************************************** Last Month allowance ****************************************************


                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", "Payroll Employee_AU"."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", PrevPeriod);
                if PayrollMonthly.Find('-') then begin
                    repeat
                        TransCodes.Reset;
                        TransCodes.SetRange(TransCodes."Transaction Code", PayrollMonthly."Transaction Code");
                        TransCodes.SetRange(TransCodes."Transaction Type", TransCodes."transaction type"::Income);
                        if TransCodes.Find('-') then
                            if (PayrollMonthly."Transaction Code" <> '1001') and (PayrollMonthly."Transaction Code" <> '1003') then
                                OtherAllowanceLastM := OtherAllowanceLastM + PayrollMonthly."Amount(LCY)";
                    until PayrollMonthly.Next = 0;
                end;
                // PayrollMonthly.Reset;
                // PayrollMonthly.SetRange(PayrollMonthly."No.", "Payroll Employee_AU"."No.");
                // PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", CalcDate('-CM', Period));
                // if PayrollMonthly.Find('-') then begin
                //     repeat
                //         TransCodes.Reset;
                //         TransCodes.SetRange(TransCodes."Transaction Code", PayrollMonthly."Transaction Code");
                //         TransCodes.SetRange(TransCodes."Special Transaction", TransCodes."special transaction"::"Prescribed Benefit");
                //         if TransCodes.Find('-') then
                //             Benefits := Benefits + PayrollMonthly.Amount;
                //     until PayrollMonthly.Next = 0;
                // end;
                //*********************************************end last mont allowance ****************************************************
                TDeductions := Statutory + Benefits + Perdiem;// + Deductions
                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", "Payroll Employee_AU"."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", Period);
                PayrollMonthly.SetRange(PayrollMonthly."Transaction Code", 'NPAY');
                if PayrollMonthly.Find('-') then begin
                    Netpay := PayrollMonthly."Amount(LCY)";
                end;
                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."No.", "Payroll Employee_AU"."No.");
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", CalcDate('-1M', CalcDate('+CY', Period)));
                PayrollMonthly.SetRange(PayrollMonthly."Transaction Code", 'NPAY');
                if PayrollMonthly.Find('-') then begin
                    netpayLastMont := PayrollMonthly."Amount(LCY)";
                end;
                varienceNetPay := Netpay - Netpay;
                //===========================================test=====================================================
                PayrollMonthly.Reset;
                PayrollMonthly.SetRange(PayrollMonthly."Payroll Period", Period);
                PayrollMonthly.SetRange(PayrollMonthly."Transaction Code", 'NPAY');
                PayrollMonthly.SetFilter(Amount, '>%1', 0);
                if PayrollMonthly.FindSet then begin
                    repeat
                        Tnet := Tnet + ROUND(PayrollMonthly."Amount(LCY)", 1, '=');
                        ;
                    until PayrollMonthly.Next = 0;
                end;
                Netpay := Netpay;
                //Tnet:=ROUND(Tnet,1,'=');
                if Netpay > 0 then NCount := NCount + 1;
                HREmployees.Reset();
                HREmployees.SetRange("No.", "No.");
                if HREmployees.FindFirst() then begin
                    jobTitle := HREmployees."Job Title";
                end;
                Dim.Reset();
                Dim.SetRange(Code, "Shortcut Dimension 3");
                if dim.FindFirst() then begin
                    department := dim.Name;
                end;

            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field(Period; Period)
                {
                    ApplicationArea = Basic;
                    Caption = 'Period';
                    TableRelation = "Payroll CalenderMalawi"."Date Opened";
                }

                // field(ForNavOpenDesigner;ReportForNavOpenDesigner)
                // {
                // 	ApplicationArea = Basic;
                // 	Caption = 'Design';
                // 	Visible = ReportForNavAllowDesign;
                // 		trigger OnValidate()
                // 		begin
                // 			ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                // 			CurrReport.RequestOptionsPage.Close();
                // 		end;

                // }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            //ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        //;ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        //;ReportsForNavPre;
    end;

    var
        Perdiem: Decimal;
        CommuterAllowance: Decimal;
        OtherAllowance: Decimal;
        OtherAllowanceLastM: Decimal;
        nssfVarience: Decimal;
        PayrollMonthly: Record "Payroll Monthly Trans_Malawi";
        GrossPay: Decimal;
        BasicPay: Decimal;
        VarianceBasic: Decimal;
        Period: Date;
        VariencePerDiem: decimal;
        nhifvarience: Decimal;

        Statutory: Decimal;
        Deductions: Decimal;
        Benefits: Decimal;
        nssfLastMonth: decimal;
        GrossPayLastMonth: decimal;
        BasicPayLastMonth: decimal;
        TDeductions: Decimal;
        TNSSFLastMonth: decimal;
        jobTitle: Text;
        Netpay: Decimal;
        TransCodes: Record "Payroll Transaction Code_AU";
        Name: Text;
        CompanyInfo: Record "Company Information";
        NSSF: Decimal;
        PerdiemLastMonth: decimal;
        NHIF: Decimal;
        NHIFlASTMonth: Decimal;
        PAYE: Decimal;
        PayeeLastMonth: Decimal;
        VariencePaye: Decimal;
        NCount: Integer;
        Dim: Record "Dimension Value";
        UserSetup: Record "User Setup";
        Tnet: Decimal;
        netpayLastMont: Decimal;
        varienceNetPay: Decimal;
        HELB: Decimal;
        HELBLastMonth: Decimal;
        VarienceHelb: Decimal;
        TNSSF: Decimal;
        TNSSFIIVarience: Decimal;
        TNSSFII: Decimal;
        Overtime: Decimal;
        HouseAllowance: Decimal;
        TravellingAllowance: Decimal;
        "Fringe Benefits": Decimal;
        AllowableDeduction: Decimal;
        Pension: Decimal;
        LoanRepayment: Decimal;
        Advances: Decimal;
        VariencrGrossPay: decimal;
        HREmployees: record "HR Employees";
        department: Text[150];



}
