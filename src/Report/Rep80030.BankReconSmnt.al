// dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
// {	
// 	assembly("ForNav.Reports.6.0.0.2068")
// 	{
// 		type(ForNav.Report_6_0_0_2068; ForNavReport80030_v6_0_0_2068){}   
// 	}
// } // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 80030 "Bank Recon Smnt"
{
    Caption = 'Bank Account Statement';
    RDLCLayout = 'Layouts/Bank Recon Smnt.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Bank Account Statement"; "Bank Account Statement")
        {
            DataItemTableView = sorting("Bank Account No.", "Statement No.");
            RequestFilterFields = "Bank Account No.", "Statement No.";
            column(ReportForNavId_9909; 9909) { } // Autogenerated by ForNav - Do not delete
            column(StatementDate_BankAccountStatement; "Bank Account Statement"."Statement Date")
            {
            }
            column(BankAccountName; BankAccountName)
            {
            }
            column(StatementEndingBalance_BankAccountStatement; "Bank Account Statement"."Statement Ending Balance")
            {
            }
            column(BalanceLastStatement_BankAccountStatement; "Bank Account Statement"."Balance Last Statement")
            {
            }
            column(ComanyName; CompanyProperty.DisplayName)
            {
            }
            column(BankAccStmtTableCaptFltr; TableCaption + ': ' + BankAccStmtFilter)
            {
            }
            column(BankAccStmtFilter; BankAccStmtFilter)
            {
            }
            column(BankAccountStatementStatementDate; "Bank Account Statement"."Statement Date")
            {
            }
            column(StmtNo_BankAccStmt; "Statement No.")
            {
                IncludeCaption = true;
            }
            column(BankAccNo_BankAccStmt; "Bank Account No.")
            {
            }
            column(BankAccStmtCapt; BankAccStmtCaptLbl)
            {
            }
            column(CurrReportPAGENOCapt; CurrReportPAGENOCaptLbl)
            {
            }
            column(CreditAmount; CreditAmount)
            {
            }
            column(DebitAmount; DebitAmount)
            {
            }
            column(ComputerBankBal; ComputerBankBal)
            {
            }
            column(DiffBankBal; DiffBankBal)
            {
            }
            column(RequesterName; RequesterName) { }
            column(RequesterDate; RequesterDate) { }
            column(Requester_Signature; "Requester Signature") { }
            column(Approver1Name; Approver1Name) { }
            column(Approver1Date; Approver1Date) { }
            column(Approver1Signature; Approver1Signature) { }
            column(Approver2Name; Approver2Name) { }
            column(Approver2Date; Approver2Date) { }
            column(Approver2Signature; Approver2Signature) { }

            column(ReconBankBal; ReconBankBal)
            {
            }
            dataitem("Bank Account Ledger Entry"; "Bank Account Ledger Entry")
            {
                DataItemLink = "Bank Account No." = field("Bank Account No.");
                RequestFilterFields = "Posting Date";
                column(ReportForNavId_5; 5) { } // Autogenerated by ForNav - Do not delete
                column(CreditAppAmt; CreditAppAmt)
                {
                }
                column(DocumentNo_Caption; "Bank Account Ledger Entry"."Document No.")
                {
                }
                column(PostingDate_Caption; "Bank Account Ledger Entry"."Posting Date")
                {
                }
                column(Description_Caption; "Bank Account Ledger Entry".Description)
                {
                }
                column(Amount_Caption; "Bank Account Ledger Entry".Amount)
                {
                }
                column(EntryNo_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Entry No.")
                {
                }
                column(BankAccountNo_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Bank Account No.")
                {
                }
                column(PostingDate_BankAccountLedgerEntry; Format("Bank Account Ledger Entry"."Posting Date", 0, '<Closing><Day,2>-<Month,2>-<Year>'))
                {
                }
                column(DocumentType_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Document Type")
                {
                }
                column(DocumentNo_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Document No.")
                {
                }
                column(Description_BankAccountLedgerEntry; "Bank Account Ledger Entry".Description)
                {
                }
                column(CurrencyCode_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Currency Code")
                {
                }
                column(Amount_BankAccountLedgerEntry; "Bank Account Ledger Entry".Amount)
                {
                }
                column(RemainingAmount_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Remaining Amount")
                {
                }
                column(AmountLCY_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Amount (LCY)")
                {
                }
                column(BankAccPostingGroup_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Bank Acc. Posting Group")
                {
                }
                column(GlobalDimension1Code_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Global Dimension 1 Code")
                {
                }
                column(GlobalDimension2Code_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Global Dimension 2 Code")
                {
                }
                column(OurContactCode_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Our Contact Code")
                {
                }
                column(UserID_BankAccountLedgerEntry; "Bank Account Ledger Entry"."User ID")
                {
                }
                column(SourceCode_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Source Code")
                {
                }
                column(Open_BankAccountLedgerEntry; "Bank Account Ledger Entry".Open)
                {
                }
                column(Positive_BankAccountLedgerEntry; "Bank Account Ledger Entry".Positive)
                {
                }
                column(ClosedbyEntryNo_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Closed by Entry No.")
                {
                }
                column(ClosedatDate_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Closed at Date")
                {
                }
                column(JournalBatchName_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Journal Batch Name")
                {
                }
                column(ReasonCode_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Reason Code")
                {
                }
                column(BalAccountType_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Bal. Account Type")
                {
                }
                column(BalAccountNo_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Bal. Account No.")
                {
                }
                column(TransactionNo_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Transaction No.")
                {
                }
                column(StatementStatus_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Statement Status")
                {
                }
                column(StatementNo_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Statement No.")
                {
                }
                column(StatementLineNo_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Statement Line No.")
                {
                }
                column(DebitAmount_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Debit Amount")
                {
                }
                column(CreditAmount_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Credit Amount")
                {
                }
                column(DebitAmountLCY_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Debit Amount (LCY)")
                {
                }
                column(CreditAmountLCY_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Credit Amount (LCY)")
                {
                }
                column(DocumentDate_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Document Date")
                {
                }
                column(ExternalDocumentNo_BankAccountLedgerEntry; "Bank Account Ledger Entry"."External Document No.")
                {
                }
                column(Reversed_BankAccountLedgerEntry; "Bank Account Ledger Entry".Reversed)
                {
                }
                column(ReversedbyEntryNo_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Reversed by Entry No.")
                {
                }
                column(ReversedEntryNo_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Reversed Entry No.")
                {
                }
                column(CheckLedgerEntries_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Check Ledger Entries")
                {
                }
                column(DimensionSetID_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Dimension Set ID")
                {
                }
                trigger OnPreDataItem();
                begin
                    // StatementMonth := DATE2DMY("Bank Account Statement"."Statement Date", 2);
                    //StartDate := 20000101D;
                    //GLAccountRec.SETFILTER("No.", '%1..%2|%3', '100', '200', '300');
                    MonthText := 'MMM'; // Replace with the expected format if needed (e.g., 'MMMM' for full month name).
                                        // Extract the month from the Statement Date
                    StatementMonth := DATE2DMY("Bank Account Statement"."Statement Date", 2) + 1; // Extracts month as an integer
                    CurrentMonthText := FORMAT(StatementMonth); // Convert month to text (e.g., '4' for April)

                    // Filter "Bank Account Ledger Entry" to exclude the current statement month
                    // "Bank Account Ledger Entry".SetFilter("Statement No.", '<>%1', CurrentMonthText); // Excludes current statement month

                    // Extract the month from the Statement Date and convert it to text
                    //  StatementMonthText := FORMAT(DATE2DMY("Bank Account Statement"."Statement Date", 2), 0, MonthText);
                    //"Bank Account Ledger Entry".SetFilter("Statement No.", '%1', CurrentMonthText);
                    "Bank Account Ledger Entry".SetRange("Statement No.", CurrentMonthText);
                    "Bank Account Ledger Entry".SetFilter("Posting Date", '%1..%2', 20190101D, "Bank Account Statement"."Statement Date");
                    // Extract the month from the Statement Date

                    if "Bank Account Ledger Entry".Amount > 0 then
                        DebitAmount := DebitAmount + "Bank Account Ledger Entry".Amount;
                    if "Bank Account Ledger Entry".Amount < 0 then
                        CreditAmount := CreditAmount + "Bank Account Ledger Entry".Amount;

                    //  HREmployees.Get();
                    HREmployee.CalcFields(Signature);
                end;
                //   end;

                trigger OnAfterGetRecord();
                begin
                    //"Bank Account Ledger Entry".SETRANGE("Posting Date",20000101D,"Bank Account Statement"."Statement Date");
                    //"Bank Account Ledger Entry".SETRANGE("Bank Account Ledger Entry"."Posting Date",20190101D,"Bank Account Statement"."Statement Date");
                    /*//"Bank Account Ledger Entry".SETFILTER("Bank Account Ledger Entry".Amount,'>%1',0);
					IF "Bank Account Ledger Entry".FINDFIRST  THEN
					  REPEAT
						IF "Bank Account Ledger Entry".Amount > 0 THEN
						DebitAmount := DebitAmount + "Bank Account Ledger Entry".Amount;
					  UNTIL "Bank Account Ledger Entry".NEXT = 0;
					//"Bank Account Ledger Entry".SETFILTER("Bank Account Ledger Entry".Amount,'<%1',0);
					IF "Bank Account Ledger Entry".FINDFIRST  THEN
					  REPEAT
						IF "Bank Account Ledger Entry".Amount < 0 THEN
						CreditAmount := CreditAmount + "Bank Account Ledger Entry".Amount;
					  UNTIL "Bank Account Ledger Entry".NEXT = 0;*/
                    //"Bank Account Ledger Entry".SETFILTER("Posting Date",'<=%1',"Bank Account Statement"."Statement Date");
                    // IF "Bank Account Ledger Entry".Amount > 0 THEN
                    //	DebitAmount := DebitAmount + "Bank Account Ledger Entry".Amount;
                    //
                    // IF "Bank Account Ledger Entry".Amount < 0 THEN
                    //	CreditAmount := CreditAmount + "Bank Account Ledger Entry".Amount;
                    //MESSAGE(FORMAT(DebitAmount));
                    //MESSAGE(FORMAT(CreditAmount));
                    //ReconBankBal := "Bank Account Statement"."Statement Ending Balance" + DebitAmount + CreditAmount;
                    //DiffBankBal := ReconBankBal - ComputerBankBal;

                end;

            }
            trigger OnAfterGetRecord();
            begin
                CreditAmount := 0;
                DebitAmount := 0;
                ReconBankBal := 0;
                ComputerBankBal := 0;
                DiffBankBal := 0;
                if BankAccounts.Get("Bank Account Statement"."Bank Account No.") then begin
                    BankAccountName := BankAccounts.Name;
                    BankAccountBal := BankAccounts.Balance;
                end;
                //Get computer bank balance upto statement date
                BankAcLedgerEntry.SetRange("Bank Account No.", "Bank Account Statement"."Bank Account No.");
                BankAcLedgerEntry.SetFilter("Posting Date", '..%1', "Bank Account Statement"."Statement Date");
                if BankAcLedgerEntry.FindFirst then
                    repeat
                        ComputerBankBal += BankAcLedgerEntry.Amount;
                    until BankAcLedgerEntry.Next = 0;
                //Calculate debits and credits
                BankAcLedgerEntry.Reset;
                BankAcLedgerEntry.SetRange("Bank Account No.", "Bank Account Statement"."Bank Account No.");
                BankAcLedgerEntry.SetFilter("Posting Date", '..%1', "Bank Account Statement"."Statement Date");
                BankAcLedgerEntry.SetRange(Open, true);
                if BankAcLedgerEntry.FindFirst then
                    repeat
                        if BankAcLedgerEntry.Amount > 0 then
                            DebitAmount += BankAcLedgerEntry.Amount;
                        if BankAcLedgerEntry.Amount < 0 then
                            CreditAmount += BankAcLedgerEntry.Amount;
                    until BankAcLedgerEntry.Next = 0;
                ReconBankBal := "Bank Account Statement"."Statement Ending Balance" + DebitAmount + CreditAmount;
                if (ComputerBankBal <> ReconBankBal) and (ReconBankBal - ComputerBankBal < 1) then
                    ComputerBankBal := ReconBankBal;
                DiffBankBal := ReconBankBal - ComputerBankBal;



                ApprovalEntry.Reset;
                ApprovalEntry.SetRange("Document No.", "Bank Account Statement"."Bank Account No.");
                ApprovalEntry.SetRange(Amount, "Bank Account Statement"."Statement Ending Balance");
                ApprovalEntry.SetRange("Sequence No.", 1);
                ApprovalEntry.SetRange(Status, ApprovalEntry.Status::Approved);
                if ApprovalEntry.FindFirst then begin
                    HREmployee.Reset;
                    HREmployee.SetRange(HREmployee."Employee UserID", ApprovalEntry."Approver ID");
                    if HREmployee.FindFirst then begin
                        HREmployee.CALCFIELDS(Signature);
                        "Bank Account Statement".Approver1Signature := HREmployee.Signature;
                        "Bank Account Statement".Approver1Name := HREmployee."First Name" + ' ' + HREmployee."Middle Name" + ' ' + HREmployee."Last Name";
                        "Bank Account Statement".Approver1Date := ApprovalEntry."Last Date-Time Modified";
                    end;
                end;

                ApprovalEntry.Reset;
                ApprovalEntry.SetRange("Document No.", "Bank Account Statement"."Bank Account No.");
                ApprovalEntry.SetRange(Amount, "Bank Account Statement"."Statement Ending Balance");
                ApprovalEntry.SetRange("Sequence No.", 2);
                ApprovalEntry.SetRange(Status, ApprovalEntry.Status::Approved);
                if ApprovalEntry.FindFirst then begin
                    HREmployee.Reset;
                    HREmployee.SetRange(HREmployee."Employee UserID", ApprovalEntry."Approver ID");
                    if HREmployee.FindFirst then begin
                        HREmployee.CALCFIELDS(Signature);
                        "Bank Account Statement".Approver2Signature := HREmployee.Signature;
                        "Bank Account Statement".Approver2Name := HREmployee."First Name" + ' ' + HREmployee."Middle Name" + ' ' + HREmployee."Last Name";
                        "Bank Account Statement".Approver2Date := ApprovalEntry."Last Date-Time Modified";
                    end;
                end;

                ApprovalEntry.Reset;
                ApprovalEntry.SetRange("Document No.", "Bank Account Statement"."Bank Account No.");
                ApprovalEntry.SetRange(Amount, "Bank Account Statement"."Statement Ending Balance");
                // ApprovalEntry.SetRange("Sequence No.", 1);
                ApprovalEntry.SetRange(Status, ApprovalEntry.Status::Approved);
                if ApprovalEntry.FindFirst then begin
                    HREmployee.Reset;
                    HREmployee.SetRange(HREmployee."Employee UserID", ApprovalEntry."Sender ID");
                    if HREmployee.FindFirst then begin
                        HREmployee.CALCFIELDS(Signature);
                        "Bank Account Statement"."Requester Signature" := HREmployee.Signature;
                        "Bank Account Statement".RequesterName := HREmployee."First Name" + ' ' + HREmployee."Middle Name" + ' ' + HREmployee."Last Name";
                        "Bank Account Statement".RequesterDate := DT2Date(ApprovalEntry."Date-Time Sent for Approval");
                    end;
                end;

            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    // field(ForNavOpenDesigner;ReportForNavOpenDesigner)
                    // {
                    // 	ApplicationArea = Basic;
                    // 	Caption = 'Design';
                    // 	Visible = ReportForNavAllowDesign;
                    // 	trigger OnValidate()
                    // 	begin
                    // 		ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                    // 		CurrReport.RequestOptionsPage.Close();
                    // 	end;

                    // }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            //ReportForNavOpenDesigner := false;
        end;
    }
    labels
    {
        TotalCaption = 'Total';
    }

    trigger OnInitReport()
    begin
        //;ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        //;ReportsForNavPre;
    end;

    var
        BankAccStmtLines: Record "Bank Account Statement Line";
        BankAccStmtFilter: Text;
        BankAccStmtCaptLbl: label 'Bank Account Statement';
        CurrReportPAGENOCaptLbl: label 'Page';
        BnkAccStmtLinTrstnDteCaptLbl: label 'Transaction Date';
        BnkAcStmtLinValDteCaptLbl: label 'Value Date';
        CreditAppAmt: Decimal;
        DebitAppAmt: Decimal;
        CreditAmount: Decimal;
        DebitAmount: Decimal;
        BankAccounts: Record "Bank Account";
        BankAccountName: Text;
        BankAccountBal: Decimal;
        ReconBankBal: Decimal;
        ComputerBankBal1: Decimal;
        ComputerBankBal: Decimal;
        DiffBankBal: Decimal;
        StartDate: Date;
        "--JEFF--": Integer;
        BankAcLedgerEntry: Record "Bank Account Ledger Entry";
        ApprovalEntry: Record "Approval Entry";
        HRemployee: Record "HR Employees";
        //  StatementMonth: Code[20];
        StatementMonthText: Text[30];
        MonthText: Text[30];
        CurrentMonthText: Text[10]; // To hold the current month number as text
        StatementMonth: Integer;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    // var 
    // 	[WithEvents]
    // 	ReportForNav : DotNet ForNavReport80030_v6_0_0_2068;
    // 	ReportForNavOpenDesigner : Boolean;
    // 	[InDataSet]
    // 	ReportForNavAllowDesign : Boolean;

    // local procedure ReportsForNavInit();
    // var
    // 	addInFileName : Text;
    // 	tempAddInFileName : Text;
    // 	path: DotNet Path;
    // 	ApplicationSystemConstants: Codeunit "Application System Constants";
    // begin
    // 	addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_0_0_2068\ForNav.Reports.6.0.0.2068.dll';
    // 	if not File.Exists(addInFileName) then begin
    // 		tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.0.0.2068.dll';
    // 		if not File.Exists(tempAddInFileName) then
    // 			Error('Please install the ForNAV DLL version 6.0.0.2068 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
    // 	end;
    // 	ReportForNav:= ReportForNav.Report_6_0_0_2068(CurrReport.ObjectId(), CurrReport.Language(), SerialNumber(), UserId(), CompanyName());
    // 	ReportForNav.Init();
    // end;

    // local procedure ReportsForNavPre();
    // begin
    // 	ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
    // 	if not ReportForNav.Pre() then CurrReport.Quit();
    // end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
