
Report 17301 "Detailed Payroll Summary KES"
{
    RDLCLayout = './Layouts/Detailed Payroll Summary KES.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Payroll Monthly Trans_AU"; "Payroll Monthly Trans_AU")
        {
            //   RequestFilterFields = "Payroll Period";
            column(ReportForNavId_1000000000; 1000000000) { } // Autogenerated by ForNav - Do not delete
            column(Pic; CompanyInfo.Picture)
            {
            }
            column(NCount; NCount)
            {
            }
            column(Name; Name)
            {
            }
            column(Currency; Currency) { }
            column(No_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."No.")
            {
            }

            column(Requester_Signature; "Payroll Monthly Trans_AU"."Requester Signature") { }
            column(RequesterName; "Payroll Monthly Trans_AU".RequesterName) { }
            column(RequesterDate; "Payroll Monthly Trans_AU".RequesterDate) { }
            column(Approver1Signature; "Payroll Monthly Trans_AU".Approver1Signature) { }
            column(Approver1Name; "Payroll Monthly Trans_AU".Approver1Name) { }
            column(Approver1Date; "Payroll Monthly Trans_AU".Approver1Date) { }
            column(Approver2Signature; "Payroll Monthly Trans_AU".Approver2Signature) { }
            column(Approver2Name; "Payroll Monthly Trans_AU".Approver2Name) { }
            column(Approver2Date; "Payroll Monthly Trans_AU".Approver2Date) { }
            column(Approver3Signature; "Payroll Monthly Trans_AU".Approver3Signature) { }
            column(Approver3Name; "Payroll Monthly Trans_AU".Approver3Name) { }
            column(Approver3Date; "Payroll Monthly Trans_AU".Approver3Date) { }
            column(TransactionCode_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Transaction Code")
            {
            }
            column(TransactionName_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Transaction Name")
            {
            }
            column(GlobalDimension1_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Global Dimension 1")
            {
            }
            column(GlobalDimension2_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Global Dimension 2")
            {
            }
            column(ShortcutDimension3_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Shortcut Dimension 3")
            {
            }
            column(ShortcutDimension4_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Shortcut Dimension 4")
            {
            }
            column(ShortcutDimension5_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Shortcut Dimension 5")
            {
            }
            column(ShortcutDimension6_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Shortcut Dimension 6")
            {
            }
            column(ShortcutDimension7_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Shortcut Dimension 7")
            {
            }
            column(ShortcutDimension8_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Shortcut Dimension 8")
            {
            }
            column(GroupText_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Group Text")
            {
            }
            column(Amount_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU".Amount)
            {
            }
            column(AmountLCY_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Amount(LCY)")
            {
            }
            column(Balance_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU".Balance)
            {
            }
            column(BalanceLCY_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Balance(LCY)")
            {
            }
            column(Grouping_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU".Grouping)
            {
            }
            column(SubGrouping_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU".SubGrouping)
            {
            }
            column(PeriodMonth_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Period Month")
            {
            }
            column(PeriodYear_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Period Year")
            {
            }
            column(PayrollPeriod_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Payroll Period")
            {
            }
            column(PeriodFilter_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Period Filter")
            {
            }
            column(ReferenceNo_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Reference No")
            {
            }
            column(Membership_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU".Membership)
            {
            }
            column(LumpSumItems_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU".LumpSumItems)
            {
            }
            column(TravelAllowance_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU".TravelAllowance)
            {
            }
            column(PostingType_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Posting Type")
            {
            }
            column(AccountType_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Account Type")
            {
            }
            column(AccountNo_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Account No")
            {
            }
            column(LoanNumber_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Loan Number")
            {
            }
            column(CoOpparameters_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Co-Op parameters")
            {
            }
            column(CompanyDeduction_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Company Deduction")
            {
            }
            column(EmployerAmount_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Employer Amount")
            {
            }
            column(EmployerAmountLCY_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Employer Amount(LCY)")
            {
            }
            column(EmployerBalance_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Employer Balance")
            {
            }
            column(EmployerBalanceLCY_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Employer Balance(LCY)")
            {
            }
            column(PaymentMode_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Payment Mode")
            {
            }
            column(PayrollCode_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Payroll Code")
            {
            }
            column(NoofUnits_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."No. of Units")
            {
            }
            column(TotalStatutories_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Total Statutories")
            {
            }
            column(ContractType_PayrollMonthlyTransAU; "Payroll Monthly Trans_AU"."Contract Type")
            {
            }
            trigger OnPreDataItem();
            begin
                if CompanyInfo.Get() then
                    CompanyInfo.CalcFields(CompanyInfo.Picture);
                UserSetup.Get(UserId);
                if UserSetup."View Payroll" = false then
                    Error('You do not have permissions to view the report');

                "Payroll Monthly Trans_AU".SetFilter("Payroll Monthly Trans_AU"."Payroll Period", '=%1', SelectedPeriod);
            end;

            trigger OnAfterGetRecord();
            begin
                Currency := 0;
                PayrollEmployee_AU.Reset();
                PayrollEmployee_AU.SetRange("No.", "Payroll Monthly Trans_AU"."No.");
                if PayrollEmployee_AU.Find('-') then begin
                    Name := PayrollEmployee_AU."Full Name";
                    // Currency := PayrollEmployee_AU."Currency Factor";
                end;

                //IF PayrollEmployee_AU."Employee Pay Currency"<>PayrollEmployee_AU."Employee Pay Currency"::"2" THEN CurrReport.SKIP;
                PayrollCal.Reset;
                PayrollCal.SetRange(PayrollCal."Date Opened", "Payroll Monthly Trans_AU"."Payroll Period");
                if PayrollCal.FindFirst() then begin
                    Currency := PayrollCal."Currency Code";
                end;

                //Requester details
                Payroll.Reset;
                Payroll.SetRange(Payroll."Payroll Period.", "Payroll Monthly Trans_AU"."Payroll Period");
                if Payroll.Find('-') then begin

                    HREmployees.Reset;
                    HREmployees.SetRange(HREmployees."Employee UserID", Payroll."User ID");
                    if HREmployees.FindFirst then begin
                        HREmployees.CALCFIELDS(Signature);
                        "Payroll Monthly Trans_AU"."Requester Signature" := HREmployees.Signature;
                        "Payroll Monthly Trans_AU".RequesterName := HREmployees."First Name" + ' ' + HREmployees."Middle Name" + ' ' + HREmployees."Last Name";
                        ApprovalEntry.Reset;
                        ApprovalEntry.SetRange(ApprovalEntry."Document No.", Payroll."Document No");
                        ApprovalEntry.SetRange("Sequence No.", 1);
                        if ApprovalEntry.FindFirst then begin
                            "Payroll Monthly Trans_AU".RequesterDate := ApprovalEntry."Date-Time Sent for Approval";
                            //  "Payroll Monthly Trans_AU".RequesterName := ApprovalEntry."Sender ID";
                        end;
                    end;


                    //Approver 1
                    ApprovalEntry.Reset;
                    ApprovalEntry.SetRange("Document No.", Payroll."Document No");
                    ApprovalEntry.SetRange("Sequence No.", 1);
                    ApprovalEntry.SetRange(Status, ApprovalEntry.Status::Approved);
                    if ApprovalEntry.FindFirst then begin
                        HREmployees.Reset;
                        HREmployees.SetRange(HREmployees."Employee UserID", ApprovalEntry."Approver ID");
                        if HREmployees.FindFirst then begin
                            HREmployees.CALCFIELDS(Signature);
                            "Payroll Monthly Trans_AU".Approver1Signature := HREmployees.Signature;
                            "Payroll Monthly Trans_AU".Approver1Name := HREmployees."First Name" + ' ' + HREmployees."Middle Name" + ' ' + HREmployees."Last Name";
                            "Payroll Monthly Trans_AU".Approver1Date := ApprovalEntry."Last Date-Time Modified";
                        end;
                    end;

                    //Approver 2
                    ApprovalEntry.Reset;
                    ApprovalEntry.SetRange("Document No.", Payroll."Document No");
                    ApprovalEntry.SetRange("Sequence No.", 2);
                    ApprovalEntry.SetRange(Status, ApprovalEntry.Status::Approved);
                    if ApprovalEntry.FindFirst then begin
                        HREmployees.Reset;
                        HREmployees.SetRange(HREmployees."Employee UserID", ApprovalEntry."Approver ID");
                        if HREmployees.FindFirst then begin
                            HREmployees.CALCFIELDS(Signature);
                            "Payroll Monthly Trans_AU".Approver2Signature := HREmployees.Signature;
                            "Payroll Monthly Trans_AU".Approver2Name := HREmployees."First Name" + ' ' + HREmployees."Middle Name" + ' ' + HREmployees."Last Name";
                            "Payroll Monthly Trans_AU".Approver2Date := ApprovalEntry."Last Date-Time Modified";
                        end;
                    end;


                    //Approver 3
                    ApprovalEntry.Reset;
                    ApprovalEntry.SetRange("Document No.", Payroll."Document No");
                    ApprovalEntry.SetRange("Sequence No.", 3);
                    ApprovalEntry.SetRange(Status, ApprovalEntry.Status::Approved);
                    if ApprovalEntry.FindFirst then begin
                        HREmployees.Reset;
                        HREmployees.SetRange(HREmployees."Employee UserID", ApprovalEntry."Approver ID");
                        if HREmployees.FindFirst then begin
                            HREmployees.CALCFIELDS(Signature);
                            "Payroll Monthly Trans_AU".Approver3Signature := HREmployees.Signature;
                            "Payroll Monthly Trans_AU".Approver3Name := HREmployees."First Name" + ' ' + HREmployees."Middle Name" + ' ' + HREmployees."Last Name";
                            "Payroll Monthly Trans_AU".Approver3Date := ApprovalEntry."Last Date-Time Modified";
                        end;
                    end;

                    PayrollCal.Reset;
                    PayrollCal.SetRange(PayrollCal."Date Opened", SelectedPeriod);
                    if PayrollCal.Find('-') then begin
                        Clear(DetDate);
                        DetDate := Format(PayrollCal."Period Name");
                    end;

                end;
                "Payroll Monthly Trans_AU".Modify;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field(periodfilter; PeriodFilter)
                {
                    ApplicationArea = Basic;
                    Caption = 'Period Filter';
                    TableRelation = "Payroll Calender_AU"."Date Opened";
                }
                // // field(ForNavOpenDesigner;ReportForNavOpenDesigner)
                // {
                // 	ApplicationArea = Basic;
                // 	Caption = 'Design';
                // 	Visible = ReportForNavAllowDesign;
                // 		trigger OnValidate()
                // 		begin
                // 			ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                // 			CurrReport.RequestOptionsPage.Close();
                // 		end;

                // }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            //ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        PayrollCal.Reset;
        PayrollCal.SetRange(PayrollCal.Closed, false);
        if PayrollCal.Find('-') then;
        PeriodFilter := PayrollCal."Date Opened";
        //;ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        if UserSetup.Get(UserId) then begin
            if UserSetup."View Payroll" = false then Error('You dont have permissions for payroll, Contact your system administrator! ')
        end else begin
            Error('You have been setup in the user setup!');
        end;
        SelectedPeriod := PeriodFilter;
        PayrollCal.Reset;
        PayrollCal.SetRange(PayrollCal."Date Opened", SelectedPeriod);
        if PayrollCal.Find('-') then begin
            PeriodName := PayrollCal."Period Name";
        end;
        if CompanyInfo.Get() then
            CompanyInfo.CalcFields(CompanyInfo.Picture);

        //;ReportsForNavPre;
    end;


    var
        Perdiem: Decimal;
        CommuterAllowance: Decimal;
        OtherAllowance: Decimal;
        PayrollMonthly: Record "Payroll Monthly Trans_AU";
        GrossPay: Decimal;
        Period: Date;
        Statutory: Decimal;
        Deductions: Decimal;
        Benefits: Decimal;
        TDeductions: Decimal;
        Netpay: Decimal;
        Currency: Decimal;
        TransCodes: Record "Payroll Transaction Code_AU";
        Name: Text;
        CompanyInfo: Record "Company Information";
        NSSF: Decimal;
        NHIF: Decimal;
        PAYE: Decimal;
        NCount: Integer;
        UserSetup: Record "User Setup";
        "Other Staff Expenses": Decimal;
        Telephone: Decimal;
        Internet: Decimal;
        Saccos: Decimal;
        Loans: Decimal;
        Welfare: Decimal;
        Pension: Decimal;
        Helb: Decimal;
        Relief: Decimal;
        PayrollEmployee_AU: Record "Payroll Employee_AU";
        PayrollCal: Record "Payroll Calender_AU";
        ApprovalEntry: Record "Approval Entry";
        Payroll: Record Payroll;
        HREmployees: Record "HR Employees";
        SelectedPeriod: Date;
        DetDate: Text[100];
        PeriodFilter: Date;
        PeriodName: Text[100];

}
