// dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
// {	
// 	assembly("ForNav.Reports.6.0.0.2068")
// 	{
// 		type(ForNav.Report_6_0_0_2068; ForNavReport80016_v6_0_0_2068){}   
// 	}
// } // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 80016 "Payroll Detailed Summary_AU"
{
	RDLCLayout = './Layouts/Payroll Detailed Summary_AU.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem("Payroll Employee_AU";"Payroll Employee_AU")
		{
			column(ReportForNavId_1000000000; 1000000000) {} // Autogenerated by ForNav - Do not delete
			column(No; "Payroll Employee_AU"."No.")
			{
			}
			column(Basic; "Payroll Employee_AU"."Basic Pay")
			{
			}
			column(HouseAllowance; PerdiumAllowance)
			{
			}
			column(CommuterAllowance; CommuterAllowance)
			{
			}
			column(OtherAllowance; OtherAllowance)
			{
			}
			column(GrossPay; GrossPay)
			{
			}
			column(Deductions; Deductions)
			{
			}
			column(Benefits; Benefits)
			{
			}
			column(TDeductions; TDeductions)
			{
			}
			column(Netpay; Netpay)
			{
			}
			column(Name; Name)
			{
			}
			column(Pic; CompanyInfo.Picture)
			{
			}
			column(Period; Period)
			{
			}
			column(Statutory; Statutory)
			{
			}
			column(NCount; NCount)
			{
			}
			column(NSSF; NSSF)
			{
			}
			column(PAYE; PAYE)
			{
			}
			column(Pension; Pension)
			{
			}
			column(IRelief; IRelief)
			{
			}
			column(PRelief; PRelief)
			{
			}
			column(NHIF; NHIF)
			{
			}
			column(commision; Commision)
			{
			}
			column(COOPLOAN; COOPLOAN)
			{
			}
			column(COOPSHARE; COOPSHARE)
			{
			}
			column(ELIMU; ELIMU)
			{
			}
			column(HELB; HELB)
			{
			}
			column(ICEA; ICEA)
			{
			}
			column(INSURANCE; INSURANCE)
			{
			}
			column(MHASIBU; MHASIBU)
			{
			}
			column(SALADV; SALADV)
			{
			}
			column(RES; RES)
			{
			}
			column(UFLOAT; UFLOAT)
			{
			}
			column(OTHERDED; OTHERDED)
			{
			}
			column(Tnet; Tnet)
			{
			}
			column(Vouchers; "Vouchers&Meals")
			{
			}
			column(noncash; "Non Cash Vouchers&Meals")
			{
			}
			trigger OnPreDataItem();
			begin
				if CompanyInfo.Get () then
				CompanyInfo.CalcFields(CompanyInfo.Picture);
				UserSetup.Get(UserId);
				if UserSetup."View Payroll"=false then
				  Error('You do not have permissions to view the report');
			end;
			
			trigger OnAfterGetRecord();
			begin
				if "Payroll Employee_AU".Status<>"Payroll Employee_AU".Status::Active then CurrReport.Skip;
				Name:="Payroll Employee_AU".Surname+' '+"Payroll Employee_AU".Firstname+' '+"Payroll Employee_AU".Lastname;
				PerdiumAllowance:=0;
				CommuterAllowance:=0;
				OtherAllowance:=0;
				GrossPay:=0;
				Statutory:=0;
				Deductions:=0;
				TDeductions:=0;
				Netpay:=0;
				Benefits:=0;
				NSSF:=0;
				NHIF:=0;
				PAYE:=0;
				NCount:=0;
				Pension:=0;
				IRelief:=0;
				PRelief:=0;
				PAYE:=0;
				COOPLOAN:=0;
				COOPSHARE:=0;
				ELIMU:=0;
				HELB:=0;
				ICEA:=0;
				INSURANCE:=0;
				MHASIBU:=0;
				SALADV:=0;
				Commision:=0;
				RES:=0;
				UFLOAT:=0;
				OTHERDED:=0;
				"Vouchers&Meals":=0;
				"Non Cash Vouchers&Meals":=0;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'OTHER DEDU');
				if PayrollMonthly.Find('-') then begin
				  OTHERDED:=PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'VOUCHER');
				if PayrollMonthly.Find('-') then begin
				  "Vouchers&Meals":=PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'NON CASH');
				if PayrollMonthly.Find('-') then begin
				  "Non Cash Vouchers&Meals":=PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'BENEFIT TE');
				if PayrollMonthly.Find('-') then begin
				  PerdiumAllowance:=PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'RESP ALLOW');
				if PayrollMonthly.Find('-') then begin
				  RES:=PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'UNACTFLOT');
				if PayrollMonthly.Find('-') then begin
				  UFLOAT:=PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'E0002');
				if PayrollMonthly.Find('-') then begin
				  Commision:=PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'EXCESS PEN');
				if PayrollMonthly.Find('-') then begin
				  CommuterAllowance:=PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'PENSION');
				if PayrollMonthly.Find('-') then begin
				  Pension:=PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'GPAY');
				if PayrollMonthly.Find('-') then begin
				  GrossPay:=PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'NHIF');
				if PayrollMonthly.Find('-') then begin
				  NHIF:=Statutory+PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'NSSF');
				if PayrollMonthly.Find('-') then begin
				  NSSF:=Statutory+PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'INSRLF');
				if PayrollMonthly.Find('-') then begin
				  IRelief:=PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'PSNR');
				if PayrollMonthly.Find('-') then begin
				  PRelief:=PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'PAYE');
				if PayrollMonthly.Find('-') then begin
				  PAYE:=Statutory+PayrollMonthly.Amount;
				end;
				Statutory:=NSSF+NHIF+PAYE;
				//Deductions
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'COOP LOAN');
				if PayrollMonthly.Find('-') then begin
				  COOPLOAN:=PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'COOP SHARE');
				if PayrollMonthly.Find('-') then begin
				  COOPSHARE:=PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'KIMSACCO');
				if PayrollMonthly.Find('-') then begin
				  ELIMU:=PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'HELB DED');
				if PayrollMonthly.Find('-') then begin
				  HELB:=PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'CASH ADVA');
				if PayrollMonthly.Find('-') then begin
				  ICEA:=PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'INSURANCE');
				if PayrollMonthly.Find('-') then begin
				  INSURANCE:=Statutory+PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'WELF CONT');
				if PayrollMonthly.Find('-') then begin
				  MHASIBU:=PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'FINLMSACC');
				if PayrollMonthly.Find('-') then begin
				  SALADV:=PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				if PayrollMonthly.Find('-') then begin
				  repeat
				  TransCodes.Reset;
				  TransCodes.SetRange(TransCodes."Transaction Code",PayrollMonthly."Transaction Code");
				  TransCodes.SetRange(TransCodes."Transaction Type",TransCodes."transaction type"::Deduction);
				  if TransCodes.Find ('-') then
				  Deductions:=Deductions+PayrollMonthly.Amount;
				  until PayrollMonthly.Next=0;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				if PayrollMonthly.Find('-') then begin
				  repeat
				  TransCodes.Reset;
				  TransCodes.SetRange(TransCodes."Transaction Code",PayrollMonthly."Transaction Code");
				  TransCodes.SetRange(TransCodes."Transaction Type",TransCodes."transaction type"::Income);
				  if TransCodes.Find ('-') then
				  if (PayrollMonthly."Transaction Code"<>'1001') and (PayrollMonthly."Transaction Code"<>'1003') then
				  OtherAllowance:=OtherAllowance+PayrollMonthly.Amount;
				  until PayrollMonthly.Next=0;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				if PayrollMonthly.Find('-') then begin
				  repeat
				  TransCodes.Reset;
				  TransCodes.SetRange(TransCodes."Transaction Code",PayrollMonthly."Transaction Code");
				  TransCodes.SetRange(TransCodes."Special Transaction",TransCodes."special transaction"::"Prescribed Benefit");
				  if TransCodes.Find ('-') then
				  Benefits:=Benefits+PayrollMonthly.Amount;
				  until PayrollMonthly.Next=0;
				end;
				TDeductions:=Statutory+Benefits+Deductions;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."No.","Payroll Employee_AU"."No.");
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'NPAY');
				if PayrollMonthly.Find('-') then begin
				  Netpay:=PayrollMonthly.Amount;
				end;
				PayrollMonthly.Reset;
				PayrollMonthly.SetRange(PayrollMonthly."Payroll Period",Period);
				PayrollMonthly.SetRange(PayrollMonthly."Transaction Code",'NPAY');
				PayrollMonthly.SetFilter(Amount,'>%1',0);
				if PayrollMonthly.FindSet then begin
				  repeat
				  Tnet:=Tnet+ROUND(PayrollMonthly.Amount,1,'=');
					until PayrollMonthly.Next=0;
				end;
				//Tnet:=ROUND(Tnet,1,'=');
				Netpay:=ROUND(Netpay,1,'=');
				if Netpay>0 then NCount:=NCount+1;
			end;
			
		}
	}

	requestpage
	{

  
		SaveValues = false;	  layout
		{
			area(content)
			{
				field(Period;Period)
				{
					ApplicationArea = Basic;
					Caption = 'Period';
					TableRelation = "Payroll Calender_AU"."Date Opened";
				}
				// field(ForNavOpenDesigner;ReportForNavOpenDesigner)
				// {
				// 	ApplicationArea = Basic;
				// 	Caption = 'Design';
				// 	Visible = ReportForNavAllowDesign;
				// 		trigger OnValidate()
				// 		begin
				// 			ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
				// 			CurrReport.RequestOptionsPage.Close();
				// 		end;

				// }
			}
		}

		actions
		{
		}
		trigger OnOpenPage()
		begin
			//ReportForNavOpenDesigner := false;
		end;
	}

	trigger OnInitReport()
	begin
		//;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		//;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		//;ReportsForNavPre;
	end;
	var
		PerdiumAllowance: Decimal;
		CommuterAllowance: Decimal;
		OtherAllowance: Decimal;
		PayrollMonthly: Record "Payroll Monthly Trans_AU";
		GrossPay: Decimal;
		Period: Date;
		Statutory: Decimal;
		Deductions: Decimal;
		Benefits: Decimal;
		TDeductions: Decimal;
		Netpay: Decimal;
		TransCodes: Record "Payroll Transaction Code_AU";
		Name: Text;
		CompanyInfo: Record "Company Information";
		NSSF: Decimal;
		NHIF: Decimal;
		PAYE: Decimal;
		NCount: Integer;
		Pension: Decimal;
		IRelief: Decimal;
		PRelief: Decimal;
		UserSetup: Record "User Setup";
		Commision: Decimal;
		COOPLOAN: Decimal;
		COOPSHARE: Decimal;
		ELIMU: Decimal;
		HELB: Decimal;
		ICEA: Decimal;
		INSURANCE: Decimal;
		MHASIBU: Decimal;
		SALADV: Decimal;
		RES: Decimal;
		UFLOAT: Decimal;
		OTHERDED: Decimal;
		Tnet: Decimal;
		"Vouchers&Meals": Decimal;
		"Non Cash Vouchers&Meals": Decimal;

	// --> Reports ForNAV Autogenerated code - do not delete or modify
	// var 
	// 	[WithEvents]
	// 	ReportForNav : DotNet ForNavReport80016_v6_0_0_2068;
	// 	ReportForNavOpenDesigner : Boolean;
	// 	[InDataSet]
	// 	ReportForNavAllowDesign : Boolean;

	// local procedure ReportsForNavInit();
	// var
	// 	addInFileName : Text;
	// 	tempAddInFileName : Text;
	// 	path: DotNet Path;
	// 	ApplicationSystemConstants: Codeunit "Application System Constants";
	// begin
	// 	addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_0_0_2068\ForNav.Reports.6.0.0.2068.dll';
	// 	if not File.Exists(addInFileName) then begin
	// 		tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.0.0.2068.dll';
	// 		if not File.Exists(tempAddInFileName) then
	// 			Error('Please install the ForNAV DLL version 6.0.0.2068 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
	// 	end;
	// 	ReportForNav:= ReportForNav.Report_6_0_0_2068(CurrReport.ObjectId(), CurrReport.Language(), SerialNumber(), UserId(), CompanyName());
	// 	ReportForNav.Init();
	// end;

	// local procedure ReportsForNavPre();
	// begin
	// 	ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
	// 	if not ReportForNav.Pre() then CurrReport.Quit();
	// end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
