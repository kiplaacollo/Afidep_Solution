// dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
// {	
// 	assembly("ForNav.Reports.6.0.0.2068")
// 	{
// 		type(ForNav.Report_6_0_0_2068; ForNavReport80001_v6_0_0_2068){}   
// 	}
// } // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 80104 "Deductions Summary_AU Malawi"
{
    RDLCLayout = './Layouts/Deductions Summary_AU.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Payroll Monthly Trans_AU"; "Payroll Monthly Trans_Malawi")
        {
            RequestFilterFields = "Transaction Code";
            ///column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(COMPANYNAME_Control1102755015; COMPANYNAME)
            {
            }
            column(COMPANYNAME_Control1102756027; COMPANYNAME)
            {
            }
            column(COMPANYNAME_Control1102756028; COMPANYNAME)
            {
            }
            column(CompanyInfo_Picture; CompanyInfo.Picture)
            {
            }
            column(CompanyInfo_Picture_Control1102756014; CompanyInfo.Picture)
            {
            }
            column(CompName; CompName)
            {
            }
            column(Addr1; Addr1)
            {
            }
            column(Addr2; Addr2)
            {
            }
            column(Email; Email)
            {
            }
            column(PayrollSummary; 'COMPANY PAYROLL SUMMARY')
            {
            }
            column(PeriodNamez; 'PERIOD:  ' + PeriodName)
            {
            }
            column(TransDesc; 'TRANSACTION DESC.')
            {
            }
            column(payments; 'PAYMENTS')
            {
            }
            column(deductions; 'DEDUCTIONS')
            {
            }
            column(kirinyagatitle; COMPANYNAME)
            {
            }
            column(abreviation; 'MUST')
            {
            }
            column(DetDate; DetDate)
            {
            }
            column(EmpNo; "Payroll Monthly Trans_AU"."No.")
            {
            }
            column(empName; empName)
            {
            }
            column(EmpAmount; "Payroll Monthly Trans_AU".Amount)
            {
            }
            column("code"; "Payroll Monthly Trans_AU"."Transaction Code")
            {
            }
            column(name; "Payroll Monthly Trans_AU"."Transaction Name")
            {
            }
            column(Transaction; "Payroll Monthly Trans_AU"."Transaction Code" + ': ' + "Payroll Monthly Trans_AU"."Transaction Name")
            {
            }
            column(TotLabel; "Payroll Monthly Trans_AU"."Transaction Code" + ': ' + "Payroll Monthly Trans_AU"."Transaction Name")
            {
            }
            column(LoanNo; "Payroll Monthly Trans_AU"."Loan Number")
            {
            }
            column(BankName; BankName)
            {
            }
            column(BranchName; BranchName)
            {
            }
            column(AccountNo; AccountNo)
            {
            }
            column(BankCode; BankCode)
            {
            }
            column(BranchCode; BranchCode)
            {
            }
            trigger OnPreDataItem();
            begin
                if CompanyInfo.Get() then
                    CompanyInfo.CalcFields(CompanyInfo.Picture);
                CompName := CompanyInfo.Name;
                Addr1 := CompanyInfo.Address;
                Addr2 := CompanyInfo.City;
                Email := CompanyInfo."E-Mail";
                //LastFieldNo := FIELDNO("Period Year");
                "Payroll Monthly Trans_AU".SetFilter("Payroll Monthly Trans_AU"."Payroll Period", '=%1', SelectedPeriod);
            end;

            trigger OnAfterGetRecord();
            begin
                //  IF NOT (((("Payroll Monthly Transactions"."Grouping"=1) AND
                //   ("Payroll Monthly Transactions"."SubGrouping"<>1)) OR
                //  ("Payroll Monthly Transactions"."Grouping"=3) OR
                //   (("Payroll Monthly Transactions"."Grouping"=4) AND
                //	("Payroll Monthly Transactions"."SubGrouping"<>0)))) THEN
                "prPayroll Periods".Reset;
                "prPayroll Periods".SetRange("prPayroll Periods"."Date Opened", SelectedPeriod);
                if "prPayroll Periods".Find('-') then begin
                    Clear(DetDate);
                    DetDate := Format("prPayroll Periods"."Period Name");
                end;
                Clear(empName);
                if emps.Get("Payroll Monthly Trans_AU"."No.") then
                    empName := emps.Firstname + ' ' + emps.Lastname + ' ' + emps.Surname;
                if not (((("Payroll Monthly Trans_AU".Grouping = 7) and
                     (("Payroll Monthly Trans_AU".SubGrouping <> 6)
                    and ("Payroll Monthly Trans_AU".SubGrouping <> 5))) or
                    (("Payroll Monthly Trans_AU".Grouping = 8) and
                     ("Payroll Monthly Trans_AU".SubGrouping <> 9)))) then begin
                    CurrReport.Skip;
                end;
                //Transaction Bank Details
                TransCodes.Reset;
                TransCodes.SetRange(TransCodes."Transaction Code", "Payroll Monthly Trans_AU"."Transaction Code");
                if TransCodes.Find('-') then begin
                    BankCode := TransCodes."Payable Bank Ac";
                    BankName := TransCodes."Bank Name";
                    BranchCode := TransCodes."Branch Code";
                    BranchName := TransCodes."Branch Name";
                    AccountNo := TransCodes."Account Number";
                end;
                /*
              CLEAR(rows);
              CLEAR(rows2);
              "Payroll Monthly Transactions".RESET;
              "Payroll Monthly Transactions".SETRANGE("Payroll Period",SelectedPeriod);
              "Payroll Monthly Transactions".SETFILTER("Group Order",'=1|3|4|7|8|9');
              //"Payroll Monthly Transactions".SETFILTER("Payroll Monthly Transactions"."SubGrouping",'=2');
              "Payroll Monthly Transactions".SETCURRENTKEY("Payroll Period","Group Order","Sub Group Order");
              IF "Payroll Monthly Transactions".FIND('-') THEN BEGIN
              CLEAR(DetDate);
              DetDate:=FORMAT("prPayroll Periods"."Period Name");
              REPEAT
              BEGIN
              IF "Payroll Monthly Transactions".Amount>0 THEN BEGIN
              IF (("Payroll Monthly Transactions"."Grouping"=4) AND ("Payroll Monthly Transactions"."SubGrouping"=0)) THEN
                GPY:=GPY+"Payroll Monthly Transactions".Amount;
              IF (("Payroll Monthly Transactions"."Grouping"=7) AND
              (("Payroll Monthly Transactions"."SubGrouping"=3) OR ("Payroll Monthly Transactions"."SubGrouping"=1) OR
               ("Payroll Monthly Transactions"."SubGrouping"=2)))  THEN
                STAT:=STAT+"Payroll Monthly Transactions".Amount;
              IF (("Payroll Monthly Transactions"."Grouping"=8) AND
              (("Payroll Monthly Transactions"."SubGrouping"=1) OR ("Payroll Monthly Transactions"."SubGrouping"=0))) THEN
                 DED:=DED+"Payroll Monthly Transactions".Amount;
              IF (("Payroll Monthly Transactions"."Grouping"=9) AND ("Payroll Monthly Transactions"."SubGrouping"=0)) THEN
                NETS:=NETS+"Payroll Monthly Transactions".Amount;
              //TotalsAllowances:=TotalsAllowances+"Payroll Monthly Transactions".Amount;
                  IF ((("Payroll Monthly Transactions"."Grouping"=1) AND
                   ("Payroll Monthly Transactions"."SubGrouping"<>1)) OR
                  ("Payroll Monthly Transactions"."Grouping"=3) OR
                   (("Payroll Monthly Transactions"."Grouping"=4) AND
                    ("Payroll Monthly Transactions"."SubGrouping"<>0))) THEN BEGIN // A Payment
                    CLEAR(countz);
                   // countz:=1;
                    CLEAR(found);
                    REPEAT
                   BEGIN
                     countz:=countz+1;
                     IF (PayTrans[countz])="Payroll Monthly Transactions"."Transaction Name" THEN found:=TRUE;
                     END;
                    UNTIL ((countz=(ARRAYLEN(PayTransAmt))) OR ((PayTrans[countz])="Payroll Monthly Transactions"."Transaction Name")
                    OR ((PayTrans[countz])=''));
                   rows:= countz;
                  PayTrans[rows]:="Payroll Monthly Transactions"."Transaction Name";
                  PayTransAmt[rows]:=PayTransAmt[rows]+"Payroll Monthly Transactions".Amount;
                  END ELSE IF ((("Payroll Monthly Transactions"."Grouping"=7) AND
                   (("Payroll Monthly Transactions"."SubGrouping"<>6)
                  AND ("Payroll Monthly Transactions"."SubGrouping"<>5))) OR
                  (("Payroll Monthly Transactions"."Grouping"=8) AND
                   ("Payroll Monthly Transactions"."SubGrouping"<>9))) THEN BEGIN
                    CLEAR(countz);
                   // countz:=1;
                    CLEAR(found);
                    REPEAT
                   BEGIN
                     countz:=countz+1;
                     IF (DedTrans[countz])="Payroll Monthly Transactions"."Transaction Name" THEN found:=TRUE;
                     END;
                    UNTIL ((countz=(ARRAYLEN(DedTransAmt))) OR ((DedTrans[countz])="Payroll Monthly Transactions"."Transaction Name")
                    OR ((DedTrans[countz])=''));
                   rows:= countz;
                  DedTrans[rows]:="Payroll Monthly Transactions"."Transaction Name";
                  DedTransAmt[rows]:=DedTransAmt[rows]+"Payroll Monthly Transactions".Amount;
                  END;
                  END; // If Amount >0;
              END;
              UNTIL "Payroll Monthly Transactions".NEXT=0;
              END;// End prPeriod Transactions Repeat
              // MESSAGE('Heh'+FORMAT(rows)+', '+FORMAT(rows2));
                                    */

            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field(periodfilter; PeriodFilter)
                {
                    ApplicationArea = Basic;
                    Caption = 'Period Filter';
                    TableRelation = "Payroll Calender_AU"."Date Opened";
                }

                // field(ForNavOpenDesigner;ReportForNavOpenDesigner)
                // {
                // 	ApplicationArea = Basic;
                // 	Caption = 'Design';
                // 	Visible = ReportForNavAllowDesign;
                // 		trigger OnValidate()
                // 		begin
                // 			ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                // 			CurrReport.RequestOptionsPage.Close();
                // 		end;

                // }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            //ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        objPeriod.Reset;
        objPeriod.SetRange(objPeriod.Closed, false);
        if objPeriod.Find('-') then;
        PeriodFilter := objPeriod."Date Opened";
        //;ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        if UserSetup.Get(UserId) then begin
            if UserSetup."View Payroll" = false then Error('You dont have permissions for payroll, Contact your system administrator! ')
        end else begin
            Error('You have been setup in the user setup!');
        end;
        SelectedPeriod := PeriodFilter;
        objPeriod.Reset;
        objPeriod.SetRange(objPeriod."Date Opened", SelectedPeriod);
        if objPeriod.Find('-') then begin
            PeriodName := objPeriod."Period Name";
        end;
        if CompanyInfo.Get() then
            CompanyInfo.CalcFields(CompanyInfo.Picture);
        Clear(rows);
        Clear(GPY);
        Clear(STAT);
        Clear(DED);
        Clear(NETS);
        //;ReportsForNavPre;
    end;

    var
        UserSetup: Record "User Setup";
        CompName: Text[50];
        Addr1: Text[50];
        Addr2: Text[50];
        Email: Text[50];
        empName: Text[250];
        DetDate: Text[100];
        found: Boolean;
        countz: Integer;
        PeriodFilter: Date;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        PeriodTrans: Record "Payroll Monthly Trans_Malawi";
        objPeriod: Record "Payroll CalenderMalawi";
        SelectedPeriod: Date;
        PeriodName: Text[30];
        CompanyInfo: Record "Company Information";
        TotalsAllowances: Decimal;
        Dept: Boolean;
        PaymentDesc: Text[200];
        DeductionDesc: Text[200];
        GroupText1: Text[200];
        GroupText2: Text[200];
        PaymentAmount: Decimal;
        DeductAmount: Decimal;
        PayTrans: array[70] of Text[250];
        PayTransAmt: array[70] of Decimal;
        DedTrans: array[70] of Text[250];
        DedTransAmt: array[70] of Decimal;
        rows: Integer;
        rows2: Integer;
        GPY: Decimal;
        NETS: Decimal;
        STAT: Decimal;
        DED: Decimal;
        TotalFor: label 'Total for ';
        GroupOrder: label '3';
        TransBal: array[2, 60] of Text[250];
        Addr: array[2, 10] of Text[250];
        RecordNo: Integer;
        NoOfColumns: Integer;
        ColumnNo: Integer;
        emps: Record "Payroll Employee_AU";
        "prPayroll Periods": Record "Payroll Calender_AU";
        TransCodes: Record "Payroll Transaction Code_AU";
        BankName: Text;
        BranchName: Text;
        AccountNo: Text;
        BankCode: Code[20];
        BranchCode: Code[20];

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    // var 
    // 	[WithEvents]
    // 	ReportForNav : DotNet ForNavReport80001_v6_0_0_2068;
    // 	ReportForNavOpenDesigner : Boolean;
    // 	[InDataSet]
    // 	ReportForNavAllowDesign : Boolean;

    // local procedure ReportsForNavInit();
    // var
    // 	addInFileName : Text;
    // 	tempAddInFileName : Text;
    // 	path: DotNet Path;
    // 	ApplicationSystemConstants: Codeunit "Application System Constants";
    // begin
    // 	addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_0_0_2068\ForNav.Reports.6.0.0.2068.dll';
    // 	if not File.Exists(addInFileName) then begin
    // 		tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.0.0.2068.dll';
    // 		if not File.Exists(tempAddInFileName) then
    // 			Error('Please install the ForNAV DLL version 6.0.0.2068 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
    // 	end;
    // 	ReportForNav:= ReportForNav.Report_6_0_0_2068(CurrReport.ObjectId(), CurrReport.Language(), SerialNumber(), UserId(), CompanyName());
    // 	ReportForNav.Init();
    // end;

    // local procedure ReportsForNavPre();
    // begin
    // 	ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
    // 	if not ReportForNav.Pre() then CurrReport.Quit();
    // end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
