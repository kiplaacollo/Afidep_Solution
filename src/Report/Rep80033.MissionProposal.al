// dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
// {	
// 	assembly("ForNav.Reports.6.0.0.2068")
// 	{
// 		type(ForNav.Report_6_0_0_2068; ForNavReport80033_v6_0_0_2068){}   
// 	}
// } // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 80033 "Mission Proposal"
{
    RDLCLayout = './Layouts/Mission Proposal.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Purchase Header"; "Purchase Header")
        {
            //column(ReportForNavId_1102755000; 1102755000) {} // Autogenerated by ForNav - Do not delete
            column(No_PurchaseHeader; "Purchase Header"."No.")
            {
            }
            column(ExpectedReceiptDate_PurchaseHeader; "Purchase Header"."Expected Receipt Date")
            {
            }
            column(DocumentDate_PurchaseHeader; "Purchase Header"."Document Date")
            {
            }
            column(CompanyINfoName; CompanyINfo.Name)
            {
            }
            column(CompanyINfoAdd; CompanyINfo.Address)
            {
            }
            column(CompanyINfoPicture; CompanyINfo.Picture)
            {
            }
            column(ShortcutDimension1Code_PurchaseHeader; "Purchase Header"."Shortcut Dimension 1 Code")
            {
            }
            column(ShortcutDimension2Code_PurchaseHeader; "Purchase Header"."Shortcut Dimension 2 Code")
            {
            }
            column(LocationCode_PurchaseHeader; "Purchase Header"."Location Code")
            {
            }
            column(dim1name; Dim1Name)
            {
            }
            column(dim2name; Dim2Name)
            {
            }
            column(UserId; "Purchase Header"."User ID")
            {
            }
            column(StrategicFocusArea_PurchaseHeader; "Purchase Header"."Strategic Focus Area")
            {
            }
            column(SubPillar_PurchaseHeader; "Purchase Header"."Sub Pillar")
            {
            }
            column(ProjectTitle_PurchaseHeader; "Purchase Header"."Project Title")
            {
            }
            column(Country_PurchaseHeader; "Purchase Header".Country2)
            {
            }
            column(County_PurchaseHeader; "Purchase Header".County)
            {
            }
            column(DatesofActivity_PurchaseHeader; "Purchase Header"."Date(s) of Activity")
            {
            }
            column(MissionTeam_PurchaseHeader; "Purchase Header"."Mission Team")
            {
            }
            column(EmployeeNo_PurchaseHeader; "Purchase Header"."Employee No")
            {
            }
            column(Background_PurchaseHeader; "Purchase Header".Background)
            {
            }
            column(Contributiontofocus_PurchaseHeader; "Purchase Header"."Contribution to focus")
            {
            }
            column(MainOutcome_PurchaseHeader; "Purchase Header"."Main Outcome")
            {
            }
            column(EmployeeName_PurchaseHeader; "Purchase Header"."Employee Name")
            {
            }
            column(InvitedMembersPartners_PurchaseHeader; "Purchase Header"."Invited Members/Partners")
            {
            }
            column(date1; date1)
            {
            }
            column(user2; user2)
            {
            }
            column(date2; date2)
            {
            }
            column(user3; user3)
            {
            }
            column(date3; date3)
            {
            }
            column(user4; user4)
            {
            }
            column(date4; date4)
            {
            }
            column(User1; User1)
            {
            }
            dataitem("Purchase Line"; "Purchase Line")
            {
                DataItemLink = "Document No." = field("No.");
                DataItemTableView = where("Line Type" = const(Objectives));
                column(ReportForNavId_1102755001; 1102755001) { } // Autogenerated by ForNav - Do not delete
                column(Description2_PurchaseLine; "Purchase Line"."Description 2")
                {
                }
                trigger OnAfterGetRecord();
                begin
                    SNo += 1;
                    if Type = Type::Item then begin
                        Item.Get("No.");
                        Item.CalcFields(Inventory);
                        Inventory := Item.Inventory;
                    end else
                        Inventory := 0;
                end;

            }
            dataitem("<Purchase Line2>"; "Purchase Line")
            {
                DataItemLink = "Document No." = field("No.");
                DataItemTableView = where("Line Type" = const("Team Roles"));
                column(ReportForNavId_16; 16) { } // Autogenerated by ForNav - Do not delete
                column(Description2_PurchaseLine2; "<Purchase Line2>"."Description 2")
                {
                }
                column(Description3_PurchaseLine2; "<Purchase Line2>".Description)
                {
                }
                trigger OnAfterGetRecord();
                begin
                    SNo += 1;
                    if Type = Type::Item then begin
                        Item.Get("No.");
                        Item.CalcFields(Inventory);
                        Inventory := Item.Inventory;
                    end else
                        Inventory := 0;
                end;

            }
            dataitem("<Purchase Line3>"; "Purchase Line")
            {
                DataItemLink = "Document No." = field("No.");
                DataItemTableView = where("Line Type" = const(Activity));
                column(ReportForNavId_20; 20) { } // Autogenerated by ForNav - Do not delete
                column(ExpectedReceiptDate_PurchaseLine3; "<Purchase Line3>"."Expected Receipt Date")
                {
                }
                column(Description3_PurchaseLine3; "<Purchase Line3>".Description)
                {
                }
                column(UnitofMeasure_PurchaseLine3; "<Purchase Line3>"."Unit of Measure")
                {
                }
                column(Description2_PurchaseLine3; "<Purchase Line3>"."Description 2")
                {
                }
                trigger OnAfterGetRecord();
                begin
                    SNo += 1;
                    if Type = Type::Item then begin
                        Item.Get("No.");
                        Item.CalcFields(Inventory);
                        Inventory := Item.Inventory;
                    end else
                        Inventory := 0;
                end;

            }
            dataitem("<Purchase Line4>"; "Purchase Line")
            {
                DataItemLink = "Document No." = field("No.");
                DataItemTableView = where("Line Type" = const("Budget Info"));
                column(ReportForNavId_23; 23) { } // Autogenerated by ForNav - Do not delete
                column(Description3_PurchaseLine4; "<Purchase Line4>".Description)
                {
                }
                column(Description2_PurchaseLine4; "<Purchase Line4>"."Description 2")
                {
                }
                column(Noofdays_PurchaseLine4; "<Purchase Line4>"."No of days")
                {
                }
                column(Noofpax_PurchaseLine4; "<Purchase Line4>"."No of pax")
                {
                }
                column(Ksh_PurchaseLine4; "<Purchase Line4>".Ksh)
                {
                }
                column(othercurrency_PurchaseLine4; "<Purchase Line4>"."other currency")
                {
                }
                column(TotalKsh_PurchaseLine4; "<Purchase Line4>"."Total Ksh")
                {
                }
                column(TotalOtherCurrency_PurchaseLine4; "<Purchase Line4>"."Total Other Currency")
                {
                }
                column(MissionExpenseCategory_PurchaseLine4; "<Purchase Line4>"."Mission Expense Category")
                {
                }
                trigger OnAfterGetRecord();
                begin
                    SNo += 1;
                    if Type = Type::Item then begin
                        Item.Get("No.");
                        Item.CalcFields(Inventory);
                        Inventory := Item.Inventory;
                    end else
                        Inventory := 0;
                end;

            }
            dataitem("<Purchase Line5>"; "Purchase Line")
            {
                DataItemLink = "Document No." = field("No.");
                DataItemTableView = where("Line Type" = const("Budget Notes"));
                column(ReportForNavId_36; 36) { } // Autogenerated by ForNav - Do not delete
                column(Description3_PurchaseLine5; "<Purchase Line5>".Description)
                {
                }
                column(Description2_PurchaseLine5; "<Purchase Line5>"."Description 2")
                {
                }
                column(Description4_PurchaseLine5; "<Purchase Line5>".Description)
                {
                }
                column(Description5_PurchaseLine5; "<Purchase Line5>".Description)
                {
                }
                column(Description6_PurchaseLine5; "<Purchase Line5>".Description)
                {
                }
                trigger OnAfterGetRecord();
                begin
                    SNo += 1;
                    if Type = Type::Item then begin
                        Item.Get("No.");
                        Item.CalcFields(Inventory);
                        Inventory := Item.Inventory;
                    end else
                        Inventory := 0;
                end;

            }
            dataitem("Approval Entry"; "Approval Entry")
            {
                DataItemLink = "Document No." = field("No.");
                DataItemTableView = where("Document Type" = const(Quote), Status = const(Approved));
                column(ReportForNavId_1102755002; 1102755002) { } // Autogenerated by ForNav - Do not delete
                column(SequenceNo_ApprovalEntry; "Approval Entry"."Sequence No.")
                {
                }
                column(SenderID_ApprovalEntry; "Approval Entry"."Sender ID")
                {
                }
                column(ApproverID_ApprovalEntry; "Approval Entry"."Approver ID")
                {
                }
                column(DateTimeSentforApproval_ApprovalEntry; "Approval Entry"."Date-Time Sent for Approval")
                {
                }
                column(LastDateTimeModified_ApprovalEntry; "Approval Entry"."Last Date-Time Modified")
                {
                }
            }
            trigger OnAfterGetRecord();
            begin
                DimVal.Reset;
                DimVal.SetRange(Code, "Shortcut Dimension 1 Code");
                if DimVal.FindFirst then
                    Dim1Name := DimVal.Name;
                DimVal.Reset;
                DimVal.SetRange(Code, "Shortcut Dimension 2 Code");
                if DimVal.FindFirst then
                    Dim2Name := DimVal.Name;
                ApprovalEntry.Reset;
                ApprovalEntry.SetRange("Document No.", "Purchase Header"."No.");
                ApprovalEntry.SetRange(Status, ApprovalEntry.Status::Approved);
                ApprovalEntry.SetRange("Sequence No.", 1);
                if ApprovalEntry.FindFirst then begin
                    date1 := ApprovalEntry."Date-Time Sent for Approval";
                end;
                ApprovalEntry.Reset;
                ApprovalEntry.SetRange("Document No.", "Purchase Header"."No.");
                ApprovalEntry.SetRange(Status, ApprovalEntry.Status::Approved);
                ApprovalEntry.SetRange("Sequence No.", 1);
                if ApprovalEntry.FindFirst then begin
                    User1 := ApprovalEntry."Last Modified By User ID";
                    date1 := ApprovalEntry."Last Date-Time Modified";
                end;
                ApprovalEntry.Reset;
                ApprovalEntry.SetRange("Document No.", "Purchase Header"."No.");
                ApprovalEntry.SetRange(Status, ApprovalEntry.Status::Approved);
                ApprovalEntry.SetRange("Sequence No.", 2);
                if ApprovalEntry.FindFirst then begin
                    user2 := ApprovalEntry."Last Modified By User ID";
                    date2 := ApprovalEntry."Last Date-Time Modified";
                end;
                ApprovalEntry.Reset;
                ApprovalEntry.SetRange("Document No.", "Purchase Header"."No.");
                ApprovalEntry.SetRange(Status, ApprovalEntry.Status::Approved);
                ApprovalEntry.SetRange("Sequence No.", 3);
                if ApprovalEntry.FindFirst then begin
                    user3 := ApprovalEntry."Last Modified By User ID";
                    date3 := ApprovalEntry."Last Date-Time Modified";
                end;
                ApprovalEntry.Reset;
                ApprovalEntry.SetRange("Document No.", "Purchase Header"."No.");
                ApprovalEntry.SetRange(Status, ApprovalEntry.Status::Approved);
                ApprovalEntry.SetRange("Sequence No.", 4);
                if ApprovalEntry.FindFirst then begin
                    user4 := ApprovalEntry."Last Modified By User ID";
                    date4 := ApprovalEntry."Last Date-Time Modified";
                end;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    // field(ForNavOpenDesigner;ReportForNavOpenDesigner)
                    // {
                    // 	ApplicationArea = Basic;
                    // 	Caption = 'Design';
                    // 	Visible = ReportForNavAllowDesign;
                    // 	trigger OnValidate()
                    // 	begin
                    // 		ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                    // 		CurrReport.RequestOptionsPage.Close();
                    // 	end;

                    // }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            //ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        //;ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        CompanyINfo.Get;
        CompanyINfo.CalcFields(Picture);
        SNo := 0;
        Dim1Name := '';
        Dim2Name := '';
        //;ReportsForNavPre;
    end;

    var
        CompanyINfo: Record "Company Information";
        Inventory: Decimal;
        SNo: Integer;
        Item: Record Item;
        DimVal: Record "Dimension Value";
        Dim1Name: Text;
        Dim2Name: Text;
        User1: Code[100];
        date1: DateTime;
        user2: Code[100];
        date2: DateTime;
        user3: Code[100];
        date3: DateTime;
        user4: Code[100];
        date4: DateTime;
        ApprovalEntry: Record "Approval Entry";
        user5: Code[100];
        date5: DateTime;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
    // 	[WithEvents]
    // 	ReportForNav : DotNet ForNavReport80033_v6_0_0_2068;
    // 	ReportForNavOpenDesigner : Boolean;
    // 	[InDataSet]
    // 	ReportForNavAllowDesign : Boolean;

    // local procedure ReportsForNavInit();
    // var
    // 	addInFileName : Text;
    // 	tempAddInFileName : Text;
    // 	path: DotNet Path;
    // 	ApplicationSystemConstants: Codeunit "Application System Constants";
    // begin
    // 	addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_0_0_2068\ForNav.Reports.6.0.0.2068.dll';
    // 	if not File.Exists(addInFileName) then begin
    // 		tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.0.0.2068.dll';
    // 		if not File.Exists(tempAddInFileName) then
    // 			Error('Please install the ForNAV DLL version 6.0.0.2068 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
    // 	end;
    // 	ReportForNav:= ReportForNav.Report_6_0_0_2068(CurrReport.ObjectId(), CurrReport.Language(), SerialNumber(), UserId(), CompanyName());
    // 	ReportForNav.Init();
    // end;

    // local procedure ReportsForNavPre();
    // begin
    // 	ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
    // 	if not ReportForNav.Pre() then CurrReport.Quit();
    // end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
